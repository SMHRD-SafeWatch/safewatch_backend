var Mpeg1Muxer, child_process, events, util

child_process = require('child_process')

util = require('util')

events = require('events')

Mpeg1Muxer = function(options) {
  var key
  this.url = options.url
  this.ffmpegOptions = options.ffmpegOptions
  this.exitCode = undefined
  this.additionalFlags = []
  if (this.ffmpegOptions) {
    for (key in this.ffmpegOptions) {
      this.additionalFlags.push(key)
      if (String(this.ffmpegOptions[key]) !== '') {
        this.additionalFlags.push(String(this.ffmpegOptions[key]))
      }
    }
  }
  this.spawnOptions = [
      "-rtsp_transport", "tcp",
      "-i", this.url,
      "-f", "mpeg1video",
      "-strict", "unofficial",
      "-b:v", "800k",                   // 비트레이트 설정 수정
      "-maxrate", "800k",               // 최대 비트레이트
      "-bufsize", "1600k",               // 버퍼 크기 설정
      "-fps_mode", "cfr",                // 프레임 속도를 일정하게 유지
      "-vsync", "2",                  // 프레임 중복을 줄이기 위한 설정
      "-an",                             // 오디오 비활성화
      "-r", "10",                        // 프레임 속도 설정
      // 추가적인 FFmpeg 옵션
      ...this.additionalFlags,
      "-"
  ];


  this.stream = child_process.spawn(options.ffmpegPath, this.spawnOptions, {
    detached: false
  })
  this.inputStreamStarted = true
  this.stream.stdout.on('data', (data) => {
    return this.emit('mpeg1data', data)
  })
  this.stream.stderr.on('data', (data) => {
    return this.emit('ffmpegStderr', data)
  })
  this.stream.on('exit', (code, signal) => {
    if (code === 1) {
      console.error('RTSP stream exited with error')
      this.exitCode = 1
      return this.emit('exitWithError')
    }
  })
  return this
}

util.inherits(Mpeg1Muxer, events.EventEmitter)

module.exports = Mpeg1Muxer
